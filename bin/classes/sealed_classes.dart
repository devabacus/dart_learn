// –§–∞–π–ª: message.dart

// Sealed –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
sealed class Message {
  final String text;

  const Message(this.text);
}

// –ü–æ–¥–∫–ª–∞—Å—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ —Ç–æ–º –∂–µ —Ñ–∞–π–ª–µ
class TextMessage extends Message {
  const TextMessage(String text) : super(text);
}

class ImageMessage extends Message {
  final String imageUrl;

  const ImageMessage(String text, this.imageUrl) : super(text);
}

class AudioMessage extends Message {
  final int durationInSeconds;

  const AudioMessage(String text, this.durationInSeconds) : super(text);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
void displayMessage(Message message) {
  // Pattern matching —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º switch
  switch (message) {
    case TextMessage():
      print('üìù –¢–µ–∫—Å—Ç: ${message.text}');

    case ImageMessage(imageUrl: var url):
      print('üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${message.text}');
      print('   URL: $url');

    case AudioMessage(durationInSeconds: var duration):
      print('üîä –ê—É–¥–∏–æ: ${message.text}');
      print('   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration}s');
  }
}

void main() {
  // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
  final messages = [
    TextMessage('–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?'),
    ImageMessage('–ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ —ç—Ç–æ!', 'https://example.com/image.jpg'),
    AudioMessage('–ü–æ—Å–ª—É—à–∞–π —ç—Ç—É –ø–µ—Å–Ω—é', 180),
  ];

  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  for (final msg in messages) {
    displayMessage(msg);
    print('---');
  }
}
